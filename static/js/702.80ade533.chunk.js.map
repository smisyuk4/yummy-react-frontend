{"version":3,"file":"static/js/702.80ade533.chunk.js","mappings":"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","sources":["pages/RegisterPage/RegisterPage.styled.js","components/Auth/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const DivStyled = styled.div`\n  padding-bottom: 60px;\n  overflow: clip;\n  position: relative;\n  min-height: calc(100vh - 60px);\n  display: flex;\n  flex-direction: column;\n`;\n","import {\n  FormStyled,\n  LabelStyled,\n  InputForm,\n  InputError,\n  H1Styled,\n  IconStyled,\n  IconStatusStyled,\n  NavLinkStyled,\n  DivStyled,\n} from '../AuthForm.styled';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { FormButton } from 'components/ButtonNav/ButtonNav.styled';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from 'redux/auth/operations';\n\nconst passwordRegex = /^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$/;\nconst nameRegex = /^[a-zA-Zа-яА-ЯґҐєЄїЇіІ0-9\\s]{1,}$/;\nconst emailRegex =\n  /^[\\w!#$%^&*\\-=/{}[\\]_|`~?\\\\+][\\w!#$%^&*\\\\+\\-?=/{}[\\]_|`~\\\\.]{1,62}[\\w!#$%^&*\\-=/{}+[\\]_|`~?\\\\]@([\\w]+\\.){1,20}[\\w]{1,4}$/;\n\nconst RegisterSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      nameRegex,\n      'Name can include numbers and letters (Latin, Cyrillic), the minimum number of characters in the field is 1 (inclusive), the maximum is 16 (inclusive)'\n    )\n    .min(1)\n    .max(16)\n    .required(),\n  password: Yup.string()\n    .matches(\n      passwordRegex,\n      'The password must include numbers and letters - the minimum number of characters in the field - 6 (inclusive), the maximum - 16 (inclusive)'\n    )\n    .min(6)\n    .max(16)\n    .required(),\n  passwordConfirm: Yup.string()\n    .matches(\n      passwordRegex,\n      'The password must include numbers and letters - the minimum number of characters in the field - 6 (inclusive), the maximum - 16 (inclusive)'\n    )\n    .min(6)\n    .max(16)\n    .required(),\n  email: Yup.string()\n    .min(6)\n    .max(86)\n    .matches(\n      emailRegex,\n      'The local part of the mail can contain capital and small Latin letters (A-Z, a-z), numbers (from 0 to 9) and special symbols !#$%^&*_-=*/?+ but no more than 64 characters in local part and 86 characters in total(max 4 character in domain).'\n    )\n    .email()\n    .required(),\n});\nconst validate = values => {\n  const errors = {};\n  if (values.passwordConfirm !== values.password) {\n    errors.passwordConfirm = \"Passwords don't match\";\n  }\n  return errors;\n};\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const sendRegister = ({ name, password, email }, { resetForm }) => {\n    dispatch(registerUser({ name, password, email }));\n    resetForm();\n  };\n  return (\n    <DivStyled>\n      <Formik\n        initialValues={{\n          name: '',\n          password: '',\n          passwordConfirm: '',\n          email: '',\n        }}\n        validate={validate}\n        onSubmit={sendRegister}\n        validationSchema={RegisterSchema}\n      >\n        {({ errors, touched, values }) => (\n          <FormStyled autoComplete=\"off\">\n            <H1Styled>Registration</H1Styled>\n            <LabelStyled\n              className={touched.name && (errors.name ? 'error' : 'valid')}\n            >\n              <IconStyled id=\"icon-person\" />\n              <InputForm type=\"text\" name=\"name\" placeholder=\"Username\" />\n              {touched.name &&\n                (errors.name ? (\n                  <>\n                    <ErrorMessage name=\"name\" component={InputError} />\n                    <IconStatusStyled id=\"icon-validation-error\" />\n                  </>\n                ) : (\n                  <IconStatusStyled id=\"icon-validation-success\" />\n                ))}\n            </LabelStyled>\n            <LabelStyled\n              className={touched.email && (errors.email ? 'error' : 'valid')}\n            >\n              <IconStyled id=\"icon-letter\" />\n              <InputForm type=\"email\" name=\"email\" placeholder=\"Email\" />\n              {touched.email &&\n                (errors.email ? (\n                  <>\n                    <ErrorMessage name=\"email\" component={InputError} />\n                    <IconStatusStyled id=\"icon-validation-error\" />\n                  </>\n                ) : (\n                  <IconStatusStyled id=\"icon-validation-success\" />\n                ))}\n            </LabelStyled>\n            <LabelStyled\n              className={\n                touched.password && (errors.password ? 'error' : 'valid')\n              }\n            >\n              <IconStyled id=\"icon-lock\" />\n              <InputForm\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n              />\n              {touched.password &&\n                (errors.password ? (\n                  <>\n                    <ErrorMessage name=\"password\" component={InputError} />\n                    <IconStatusStyled id=\"icon-validation-error\" />\n                  </>\n                ) : (\n                  <IconStatusStyled id=\"icon-validation-success\" />\n                ))}\n            </LabelStyled>\n            <LabelStyled\n              className={\n                touched.passwordConfirm &&\n                (errors.passwordConfirm ? 'error' : 'valid')\n              }\n            >\n              <IconStyled id=\"icon-lock\" />\n              <InputForm\n                type=\"password\"\n                name=\"passwordConfirm\"\n                placeholder=\"Password confirmation\"\n              />\n              {touched.passwordConfirm &&\n                (errors.passwordConfirm ? (\n                  <>\n                    <ErrorMessage\n                      name=\"passwordConfirm\"\n                      component={InputError}\n                    />\n                    <IconStatusStyled id=\"icon-validation-error\" />\n                  </>\n                ) : (\n                  <IconStatusStyled id=\"icon-validation-success\" />\n                ))}\n            </LabelStyled>\n\n            <FormButton type=\"submit\">Sign up</FormButton>\n          </FormStyled>\n        )}\n      </Formik>\n      <NavLinkStyled to=\"/login\">Login</NavLinkStyled>\n    </DivStyled>\n  );\n};\n","import { DivStyled } from './RegisterPage.styled';\nimport { RegisterForm } from 'components/Auth/RegisterForm';\nimport { Image } from 'components/Auth/Image';\nimport { BackGround } from 'components/Auth/BackGround';\n\nexport const RegisterPage = () => {\n  return (\n    <DivStyled>\n      <Image />\n      <RegisterForm />\n\n      <BackGround />\n    </DivStyled>\n  );\n};\n"],"names":["DivStyled","styled","passwordRegex","RegisterSchema","Yup","shape","name","matches","min","max","required","password","passwordConfirm","email","validate","values","errors","RegisterForm","dispatch","useDispatch","initialValues","onSubmit","resetForm","registerUser","validationSchema","touched","autoComplete","className","id","type","placeholder","component","InputError","to","RegisterPage","Image","BackGround"],"sourceRoot":""}