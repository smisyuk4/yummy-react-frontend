{"version":3,"file":"static/js/663.36177392.chunk.js","mappings":"6LAEaA,E,QAAYC,EAAAA,IAAH,2K,sECmBhBC,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,SAAUF,EAAAA,KACPG,QANiB,4CAQhB,+IAEDC,IAAI,GACJC,IAAI,IACJC,WACHC,MAAOP,EAAAA,KACJG,QAZH,yHAcI,4IAEDI,QACAD,aAGQE,EAAa,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,cAAe,CAAEC,KAAM,GAAIV,SAAU,GAAIK,MAAO,IAChDM,SARa,SAAC,EAAD,GAAyC,IAAtCX,EAAqC,EAArCA,SAAUK,EAA2B,EAA3BA,MAAWO,EAAgB,EAAhBA,UACzCL,GAASM,EAAAA,EAAAA,IAAU,CAAEb,SAAAA,EAAUK,MAAAA,KAC/BO,GACD,EAMKE,iBAAkBjB,EAHpB,SAKG,SAAAkB,GACC,IAAQC,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QAChB,OACE,UAAC,KAAD,CAAYC,aAAa,MAAzB,WACE,SAAC,KAAD,uBACA,UAAC,KAAD,CACEC,UAAWF,EAAQZ,QAAUW,EAAOX,MAAQ,QAAU,SADxD,WAGE,SAAC,KAAD,CAAYe,GAAG,iBACf,SAAC,KAAD,CAAWC,KAAK,QAAQX,KAAK,QAAQY,YAAY,UAChDL,EAAQZ,QACNW,EAAOX,OACN,iCACE,SAAC,KAAD,CAAcK,KAAK,QAAQa,UAAWC,EAAAA,MACtC,SAAC,KAAD,CAAkBJ,GAAG,8BAGvB,SAAC,KAAD,CAAkBA,GAAG,iCAG3B,UAAC,KAAD,CACED,UACEF,EAAQjB,WAAagB,EAAOhB,SAAW,QAAU,SAFrD,WAKE,SAAC,KAAD,CAAYoB,GAAG,eACf,SAAC,KAAD,CACEC,KAAK,WACLX,KAAK,WACLY,YAAY,aAEbL,EAAQjB,WACNgB,EAAOhB,UACN,iCACE,SAAC,KAAD,CAAcU,KAAK,WAAWa,UAAWC,EAAAA,MACzC,SAAC,KAAD,CAAkBJ,GAAG,8BAGvB,SAAC,KAAD,CAAkBA,GAAG,iCAI3B,SAAC,KAAD,CAAYC,KAAK,SAAjB,uBAGL,KAEH,SAAC,KAAD,CAAeI,GAAG,YAAlB,4BAGL,E,kBCjGYC,EAAa,WACxB,OACE,UAAC/B,EAAD,YACE,SAACgC,EAAA,EAAD,KACA,SAACrB,EAAD,KAEA,SAACsB,EAAA,EAAD,MAGL,C","sources":["pages/SigninPage/SigninPage.styled.js","components/Auth/SigninForm/SigninForm.jsx","pages/SigninPage/SigninPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const DivStyled = styled.div`\n  padding-bottom: 60px;\n  overflow: clip;\n  position: relative;\n  min-height: calc(100vh - 60px);\n  display: flex;\n  flex-direction: column;\n`;\n","import {\n  FormStyled,\n  LabelStyled,\n  InputForm,\n  InputError,\n  H1Styled,\n  IconStyled,\n  IconStatusStyled,\n  NavLinkStyled,\n  DivStyledLogin,\n} from 'components/Auth/AuthForm.styled';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { FormButton } from 'components/ButtonNav/ButtonNav.styled';\nimport { useDispatch } from 'react-redux';\nimport { loginUser } from 'redux/auth/operations';\n\nconst passwordRegex = /^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$/;\nconst emailRegex =\n  /^[\\w!#$%^&*\\-=/{}[\\]_|`~?\\\\+][\\w!#$%^&*+\\-?=/{}[\\]_|`~\\\\.]{1,62}[\\w!#$%^&*\\-=/{}+[\\]_|`~?\\\\]@([\\w]+\\.){1,20}[\\w]{1,4}$/;\n\nconst SigninSchema = Yup.object().shape({\n  password: Yup.string()\n    .matches(\n      passwordRegex,\n      'The password must include numbers and letters - the minimum number of characters in the field - 6 (inclusive), the maximum - 16 (inclusive)'\n    )\n    .min(3)\n    .max(64)\n    .required(),\n  email: Yup.string()\n    .matches(\n      emailRegex,\n      'The local part of the mail can contain capital and small Latin letters (A-Z, a-z), numbers (from 0 to 9), but no more than 64 characters'\n    )\n    .email()\n    .required(),\n});\n\nexport const SigninForm = () => {\n  const dispatch = useDispatch();\n  const sendSignin = ({ password, email }, { resetForm }) => {\n    dispatch(loginUser({ password, email }));\n    resetForm();\n  };\n  return (\n    <DivStyledLogin>\n      <Formik\n        initialValues={{ name: '', password: '', email: '' }}\n        onSubmit={sendSignin}\n        validationSchema={SigninSchema}\n      >\n        {formik => {\n          const { errors, touched } = formik;\n          return (\n            <FormStyled autoComplete=\"off\">\n              <H1Styled>Sign In</H1Styled>\n              <LabelStyled\n                className={touched.email && (errors.email ? 'error' : 'valid')}\n              >\n                <IconStyled id=\"icon-letter\" />\n                <InputForm type=\"email\" name=\"email\" placeholder=\"Email\" />\n                {touched.email &&\n                  (errors.email ? (\n                    <>\n                      <ErrorMessage name=\"email\" component={InputError} />\n                      <IconStatusStyled id=\"icon-validation-error\" />\n                    </>\n                  ) : (\n                    <IconStatusStyled id=\"icon-validation-success\" />\n                  ))}\n              </LabelStyled>\n              <LabelStyled\n                className={\n                  touched.password && (errors.password ? 'error' : 'valid')\n                }\n              >\n                <IconStyled id=\"icon-lock\" />\n                <InputForm\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                />\n                {touched.password &&\n                  (errors.password ? (\n                    <>\n                      <ErrorMessage name=\"password\" component={InputError} />\n                      <IconStatusStyled id=\"icon-validation-error\" />\n                    </>\n                  ) : (\n                    <IconStatusStyled id=\"icon-validation-success\" />\n                  ))}\n              </LabelStyled>\n\n              <FormButton type=\"submit\">Sign In</FormButton>\n            </FormStyled>\n          );\n        }}\n      </Formik>\n      <NavLinkStyled to=\"/register\">Registration</NavLinkStyled>\n    </DivStyledLogin>\n  );\n};\n","import { DivStyled } from './SigninPage.styled';\nimport { SigninForm } from 'components/Auth/SigninForm';\nimport { Image } from 'components/Auth/Image';\nimport { BackGround } from 'components/Auth/BackGround';\n\nexport const SigninPage = () => {\n  return (\n    <DivStyled>\n      <Image />\n      <SigninForm />\n\n      <BackGround />\n    </DivStyled>\n  );\n};\n"],"names":["DivStyled","styled","SigninSchema","Yup","shape","password","matches","min","max","required","email","SigninForm","dispatch","useDispatch","initialValues","name","onSubmit","resetForm","loginUser","validationSchema","formik","errors","touched","autoComplete","className","id","type","placeholder","component","InputError","to","SigninPage","Image","BackGround"],"sourceRoot":""}